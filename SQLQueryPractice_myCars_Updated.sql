USE [ADVENTUREWORKS2016]
GO

DROP TABLE DBO.MYCARS;
DROP TABLE DBO.CARSORIGIN;

CREATE TABLE MYCARS
(
	ID INT PRIMARY KEY IDENTITY(1,1) ,
	NAME VARCHAR(50) NOT NULL UNIQUE,
	COMPANY VARCHAR(50) NOT NULL,
	POWER INT NOT NULL,
	PRICE FLOAT
);
 
CREATE TABLE CARSORIGIN
(
	ID INT PRIMARY KEY IDENTITY(1,1) ,
	COMPANY VARCHAR(50) NOT NULL UNIQUE,
	COUNTRY VARCHAR(50) NOT NULL,

);

INSERT INTO MYCARS
VALUES
	( 'CORROLLA', 'TOYOTA', 1800, 16500),
	( 'PILOT', 'HONDA', 3200, 34000),
	( 'C200', 'MERCEDEZ', 2000, 32000),
	( 'PRIUS', 'TOYOTA', 1600, 15000),
	( 'JETTA', 'VOLKSWAGEN', 1800, 16200),
	( 'C500', 'MERCEDEZ', 5000, 66800),
	( 'X5', 'BMW', 4000, 50500),
	( 'MUSTANG', 'FORD', 5000, 36300),
	( '208', 'PEUGEOT', 1400, 14000),
	( 'CAMRY', 'TOYOTA', 2400, 23000),
	( 'ATLAS', 'VOLKSWAGEN', 5000, 34500),
	( '  110', 'BUGATTI', 8000, 250900),
	( 'LANDCRUISER', 'TOYOTA', 3000, 42600),
	( 'CIVIC', 'HONDA', 1800, 17900),
	( 'ACCORD', 'HONDA', 2000, 24400),
	( 'RANG ROVER', 'LAND ROVER', 3200, 66000)

INSERT INTO CARSORIGIN
VALUES
	( 'TOYOTA', 'JAPAN' ),
	( 'HONDA' , 'JAPAN' ),
	( 'MERCEDEZ' , 'GERMANY' ),
	( 'VOLKSWAGEN', 'GERMANY' ),
	( 'FORD', 'USA'),
	( 'BMW', 'GERMANY' ),
	( 'PEUGEOT' , 'FRANCE' ),
	( 'BUGATTI' , 'ITALY' ),
	( 'LAND ROVER', 'UK' )

SELECT * FROM MYCARS
SELECT * FROM CARSORIGIN

 -- DISTINCT IS USED TO COUNT UNIQUE VALUES IN A COLUMN
SELECT DISTINCT COMPANY AS CMP
FROM [DBO].[myCARS]
ORDER BY COMPANY

 -- COUNT RETURNS THE COUNT OF ALL ROWS IN THE TABLE
SELECT COUNT(*) AS _COUNT_
FROM myCARS 

-- GROUP BY COMPANY / USE HAVING / CALCULATE AVERAGE CAR PRICE PER COMPANY 
SELECT COMPANY, AVG(PRICE) AS TOTAL
FROM MYCARS
GROUP BY COMPANY 
HAVING SUM(PRICE) >= 50000 
ORDER BY TOTAL DESC;

-- MERGING TWO TABLES ( JAPANIES CARS WITH PRICE GREATER THAN A  NUM) AND RETURN THE COUNT
SELECT COUNT(*) AS _COUNT_ FROM MYCARS AS T1
INNER JOIN CARSORIGIN AS T2
ON (T1.COMPANY = T2.COMPANY)
WHERE T1.PRICE >= 20000
AND T2.COUNTRY = 'JAPAN' 

-- RANKING POWER AFTER PARTINTIONING BY COMPANY
SELECT NAME,COMPANY, POWER,
RANK() OVER(ORDER BY POWER DESC) AS POWER_RANK,
RANK() OVER(PARTITION BY COMPANY ORDER BY POWER DESC) AS POWER_RANK_PARTITION
FROM MYCARS

SELECT NAME,COMPANY, POWER,
DENSE_RANK() OVER(ORDER BY POWER DESC) AS POWE_RRANK, 
DENSE_RANK() OVER(PARTITION BY COMPANY ORDER BY POWER DESC) AS DENSE_POWER_RANK, 
ROW_NUMBER() OVER(ORDER BY POWER DESC) AS ROW_RANK
FROM MYCARS

-- THE COUNT OF POWERS OVER 3000 HP
SELECT  POWER, COUNT(*) AS 'POWER COUNT'
FROM MYCARS
WHERE POWER > 3000
GROUP BY POWER

-- ADD A NEW COLUMN TO SHOW THE COUNT OF ALL CARS WITH THE SAME POWER (FIRST WAY)
SELECT M1.ID, M1.NAME, M1.POWER, ( SELECT COUNT(*) FROM MYCARS M2 WHERE M2.POWER = M1.POWER) AS 'PW COUNT'
FROM MYCARS M1
ORDER BY POWER DESC;

-- ADD A NEW COLUMN TO SHOW THE COUNT OF EACH CARS WITH THE SAME POWER (SECOND WAY)
SELECT M1.ID, M1.NAME, M1.POWER, COUNT(1) OVER (PARTITION BY M1.POWER) AS 'PW COUNT'
FROM MYCARS M1
ORDER BY POWER DESC;

SELECT 
AVG(PRICE) AS AVGPRICE,
AVG(POWER) AS POWER
FROM MYCARS

-- TO REPLACE A TOKEN IN THE TABLE WITHOUT CHANGING THE ACTUAL DATA
SELECT *, REPLACE (COMPANY, 'MERCEDEZ', 'MERCEDEZ BENZ') AS NEWCOMPANY 
FROM MYCARS 
WHERE COMPANY LIKE '%DEZ'

-- TO REMOVE ANY UNNECESSERY SPACES FROM THE BEGINING OF THE NAME COLUMN
UPDATE MYCARS
SET NAME = LTRIM (NAME);

SELECT * FROM MYCARS
SELECT * FROM CARSORIGIN

-- COUNTING DISTINCT COMPANIES 
SELECT  COUNT( DISTINCT COMPANY) AS TOTAL
FROM MYCARS


-- NEW TABLE CONTAINS THE CARS WITH POWER GREATER THAN THE AVERAGE POWER USING WITH CLAUSE
DROP TABLE TEMPORARYTABLE;

CREATE TABLE TEMPORARYTABLE
( ID INT, NAME VARCHAR, POWER INT, PRICE FLOAT);

WITH TEMPORARYTABLE(AVERAGEVALUE) AS
    (SELECT AVG(POWER) FROM MYCARS )
        SELECT ID, NAME, POWER, PRICE
        FROM MYCARS, TEMPORARYTABLE 
        WHERE MYCARS.POWER > TEMPORARYTABLE.AVERAGEVALUE;

---- RANKING 
-- REGULAR ORDER
SELECT NAME,ID, POWER FROM MYCARS
ORDER BY POWER

-- RANKIN BY POWER
SELECT NAME,ID, POWER, 
ROW_NUMBER() OVER (ORDER BY POWER DESC) AS POWER_RANK
FROM MYCARS 

-- RANKING BY
SELECT NAME,ID, POWER, PRICE ,
ROW_NUMBER() OVER (ORDER BY POWER DESC) AS POWER_RANK,
ROW_NUMBER() OVER (ORDER BY PRICE DESC) AS PRICE_RANK
FROM MYCARS 


-- RANKING, RANK() AND DENSE_RANK()
SELECT NAME,COMPANY, POWER,
RANK() OVER(ORDER BY POWER DESC) AS POWERRANK,
DENSE_RANK() OVER(ORDER BY POWER DESC) AS POWERDENSERANK
FROM MYCARS


-- USING NTILE FOR RANKING WHERE (N) IS THE NUMBER OF PERCENTILES
SELECT NAME, COMPANY, POWER,
NTILE(4) OVER (ORDER BY POWER DESC ) AS PERC
FROM MYCARS
ORDER BY PERC

-- ANOTHER EXAMPLE
SELECT NAME, COMPANY, POWER,
NTILE((SELECT COUNT(*)/8 FROM MYCARS))
OVER (ORDER BY POWER DESC ) AS PERC
FROM MYCARS
ORDER BY PERC

-- PATRITIONING ..
SELECT NAME,COMPANY, POWER,
RANK() OVER(PARTITION BY COMPANY ORDER BY POWER DESC) AS POWERRANK
FROM MYCARS
ORDER BY COMPANY

-- AGGREGATE PARTITIONS
-- A CAR PRICE COMPARING TO THE AVERAGE PRICE --> PRICE_DIF
SELECT ID, NAME, COMPANY,PRICE, 
PRICE - AVG(PRICE) OVER (PARTITION BY 0)
AS PRICE_DIF FROM MYCARS
ORDER BY PRICE_DIF


-- CHECKSUM AND CHECKSUM_AGG
SELECT *, CHECKSUM(NAME) AS 'CHECKSUM_N' FROM MYCARS

SELECT *, CHECKSUM(POWER) AS 'CHECKSUM_P' FROM MYCARS

SELECT  CHECKSUM_AGG(ALL POWER) AS 'QTY_CHECKSUM_AGG'
FROM MYCARS;

SELECT  CHECKSUM_AGG(DISTINCT POWER) QTY_CHECKSUM_AGG
FROM MYCARS;

SELECT * FROM MYCARS
SELECT * FROM CARSORIGIN

-- GROUP BY AND GROUPING() USAGE
SELECT COMPANY, COUNT(ID) AS CARS_NUMBER FROM MYCARS
GROUP BY COMPANY
ORDER BY CARS_NUMBER

SELECT COMPANY AS COMP, ID , AVG(PRICE) AS AVG_PRICE, GROUPING (COMPANY) AS COMP_GROUP
FROM MYCARS
GROUP BY ROLLUP (COMPANY, ID)

-- FIND OUT THE CHEAPEST AND MOST EXPENSIVE CAR BY COUNTRY
SELECT C.COUNTRY AS CAR_ORIGIN, 
		MIN(P.PRICE) AS MIN_PRICE,
		MAX(P.PRICE) AS MAX_PRICE
FROM CARSORIGIN AS C
INNER JOIN MYCARS AS P ON C.COMPANY = P.COMPANY
GROUP BY C.COUNTRY
ORDER BY MIN_PRICE;

-- MATH FUNCTION ROUND
DECLARE @NUMBER FLOAT = 3.567
SELECT @NUMBER AS NUMBER
SELECT ROUND(@NUMBER, 0) AS INT_ROUND, ROUND(@NUMBER, 1) AS ONE_DEC_ROUND ,ROUND(@NUMBER, 2) AS TWO_DEC_ROUND
-- RANDOM NUMBER USING RAND
SELECT RAND() AS RANDOM_VAL
GO -- GENERATES 4 VALUES
SELECT RAND(1) AS RANDOM_VAL
GO 

-- USING PARTITION WITH ROW_NUMBER() 
-- SORT CARS HPOWER BY PARTITIONING BY COUNTRY  
SELECT O.COUNTRY, C.COMPANY, C.POWER,  
	ROW_NUMBER() OVER (PARTITION BY O.COUNTRY ORDER BY C.POWER) AS ROW_NUM
	FROM MYCARS AS C
	INNER JOIN CARSORIGIN AS O ON C.COMPANY = O.COMPANY
	ORDER BY O.COUNTRY; 

-- DATE FUNCTIONS
-- DECLARE A VARIABLE AND SEPERATING DAY/MONTH/YEAR 
DECLARE @DATE DATETIME = GETDATE()
SELECT @DATE AS CURRENT_DATE_TIME;

SELECT MONTH(@DATE) AS THIS_MONTH,
		DAY(@DATE) AS THIS_DAY,
		YEAR(@DATE) AS THIS_YEAR;

SELECT DATENAME(M , @DATE) AS THIS_MONTH,
		DATENAME(D, @DATE) AS THIS_DAY,
		DATENAME(YY, @DATE) AS THIS_YEAR;
-- DATE DIFFERENCE
SELECT DATEDIFF(YY, '1/1/2017', '2/2/2019' ) AS YEAR_DIF
SELECT DATEDIFF(MM,  '1/1/2017', '2/2/2019') AS MONTH_DIF
SELECT DATEDIFF(DD,  '1/1/2017', '2/2/2019') AS DAY_DIF

-- LOGICAL FUNCTIONS .. CHOOSE, IIF, CASE
-- CHOOSE(INDEX , VAL_1, VAL_2 ... )
SELECT CHOOSE ( CEILING(RAND()*10) , 'C1','T2' ,'K3', 'G4', 'H5', 'L6') AS RAND_CHOICE

-- IIF (BOOL_EXP , TRUE_VAL, FALSE_VAL )
SELECT F.NAME , F.COMPANY, F.PRICE,
		IIF (F.PRICE BETWEEN 14000 AND 20000, 'OK' , '-' ) AS STATUS, F.POWER
		FROM MYCARS AS F

-- CASE COLUMN_NAME WHEN ... THEN .. ELSE .. END 
SELECT F.NAME , F.COMPANY, F.PRICE,
		CASE F.ID
			WHEN 1 THEN 'OK'
			WHEN 2 THEN 'ALRIGHT'
			WHEN 3 THEN 'GOOOD'
			ELSE '-'
		END AS 'STATUS'
FROM MYCARS AS F

SELECT CAR.NAME, CAR.PRICE ,
	CASE 
		WHEN CAR.POWER BETWEEN 0 AND  2500 THEN '--'
		WHEN CAR.POWER BETWEEN 2500 AND 3500 THEN 'STRONG'
		WHEN CAR.POWER BETWEEN 3500 AND 4500 THEN 'VERY STRONG'
		ELSE 'WOW'
	END AS 'HP EVAL'
FROM MYCARS AS CAR

-- USING LEFT AND RIGHT WITH A STRING 
SELECT LEFT(CAR.COMPANY , 3) + '_' + LEFT(CAR.NAME, 3 ) AS MASK
	FROM MYCARS AS CAR

-- LEN AND DATALENGTH
SELECT CAR.NAME, CAR.PRICE, 
	LEN(CAR.PRICE) AS PRICE_LEN,
	DATALENGTH(CAR.PRICE) AS PRICE_DATALEN
FROM MYCARS AS CAR;

-- USING CHARINDEX TO MATCH A SUBSTRING IN A COLUMN (SEARCH USAGE)
-- CHARINDEX DOES NT WORK WITH WILD CARD SO WE USE PATINDEX
SELECT ID, NAME, CHARINDEX('TOY', COMPANY) AS FOUND FROM MYCARS
WHERE CHARINDEX ('TOY', COMPANY) > 0;

SELECT ID, NAME , PATINDEX('%YOT%' , COMPANY) AS FOUND FROM MYCARS
WHERE PATINDEX('%YOT%' , COMPANY) > 0;

-- REPLACE A SUBSTRING 
SELECT C.NAME, C.COMPANY, REPLACE(C.COMPANY, 'HON' , 'MAN') AS MODIFIED 
FROM MYCARS AS C

-- SHOW PART OF THE STRING 
SELECT C.NAME, C.COMPANY , SUBSTRING (C.COMPANY, 3, 10) AS PART
FROM MYCARS AS C


SELECT P.NAME, P.COMPANY, P.NAME +'-' +LTRIM (STR(P.POWER)) AS [FULL NAME]
FROM MYCARS AS P

SELECT P.NAME, P.COMPANY, CONCAT (P.NAME,'-' , LTRIM (P.POWER)) AS [FULL NAME]
FROM MYCARS AS P